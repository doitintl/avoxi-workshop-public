{"version":3,"sources":["../../src/model/middleware.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../document.js';\nimport {\n  MediaPart,\n  MessageData,\n  ModelInfo,\n  ModelMiddleware,\n  Part,\n} from '../model.js';\n\n/**\n * Preprocess a GenerateRequest to download referenced http(s) media URLs and\n * inline them as data URIs.\n */\nexport function downloadRequestMedia(options?: {\n  maxBytes?: number;\n  filter?: (part: MediaPart) => boolean;\n}): ModelMiddleware {\n  return async (req, next) => {\n    const { default: fetch } = await import('node-fetch');\n\n    const newReq = {\n      ...req,\n      messages: await Promise.all(\n        req.messages.map(async (message) => {\n          const content: Part[] = await Promise.all(\n            message.content.map(async (part) => {\n              // skip non-media parts and non-http urls, or parts that have been\n              // filtered out by user config\n              if (\n                !part.media ||\n                !part.media.url.startsWith('http') ||\n                (options?.filter && !options?.filter(part))\n              ) {\n                return part;\n              }\n\n              const response = await fetch(part.media.url, {\n                size: options?.maxBytes,\n              });\n              if (response.status !== 200)\n                throw new Error(\n                  `HTTP error downloading media '${\n                    part.media.url\n                  }': ${await response.text()}`\n                );\n\n              // use provided contentType or sniff from response\n              const contentType =\n                part.media.contentType ||\n                response.headers.get('content-type') ||\n                '';\n\n              return {\n                media: {\n                  contentType,\n                  url: `data:${contentType};base64,${Buffer.from(\n                    await response.arrayBuffer()\n                  ).toString('base64')}`,\n                },\n              };\n            })\n          );\n\n          return {\n            ...message,\n            content,\n          };\n        })\n      ),\n    };\n\n    return next(newReq);\n  };\n}\n\n/**\n * Validates that a GenerateRequest does not include unsupported features.\n */\nexport function validateSupport(options: {\n  name: string;\n  supports?: ModelInfo['supports'];\n}): ModelMiddleware {\n  const supports = options.supports || {};\n  return async (req, next) => {\n    function invalid(message: string): never {\n      throw new Error(\n        `Model '${\n          options.name\n        }' does not support ${message}. Request: ${JSON.stringify(\n          req,\n          null,\n          2\n        )}`\n      );\n    }\n\n    if (\n      supports.media === false &&\n      req.messages.some((message) => message.content.some((part) => part.media))\n    )\n      invalid('media, but media was provided');\n    if (supports.tools === false && req.tools?.length)\n      invalid('tool use, but tools were provided');\n    if (supports.multiturn === false && req.messages.length > 1)\n      invalid(`multiple messages, but ${req.messages.length} were provided`);\n    if (\n      typeof supports.output !== 'undefined' &&\n      req.output?.format &&\n      !supports.output.includes(req.output?.format)\n    )\n      invalid(`requested output format '${req.output?.format}'`);\n    return next();\n  };\n}\n\nfunction lastUserMessage(messages: MessageData[]) {\n  for (let i = messages.length - 1; i >= 0; i--) {\n    if (messages[i].role === 'user') {\n      return messages[i];\n    }\n  }\n}\n\nexport function conformOutput(): ModelMiddleware {\n  return async (req, next) => {\n    const lastMessage = lastUserMessage(req.messages);\n    if (!lastMessage) return next(req);\n    const outputPartIndex = lastMessage.content.findIndex(\n      (p) => p.metadata?.purpose === 'output'\n    );\n    const outputPart =\n      outputPartIndex >= 0 ? lastMessage.content[outputPartIndex] : undefined;\n\n    if (!req.output?.schema || (outputPart && !outputPart?.metadata?.pending)) {\n      return next(req);\n    }\n\n    const instructions = `\n\nOutput should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(req.output!.schema!)}\n\\`\\`\\`\n`;\n\n    if (outputPart) {\n      lastMessage.content[outputPartIndex] = {\n        ...outputPart,\n        metadata: {\n          purpose: 'output',\n          source: 'default',\n        },\n        text: instructions,\n      } as Part;\n    } else {\n      lastMessage?.content.push({\n        text: instructions,\n        metadata: { purpose: 'output', source: 'default' },\n      });\n    }\n\n    return next(req);\n  };\n}\n\n/**\n * Provide a simulated system prompt for models that don't support it natively.\n */\nexport function simulateSystemPrompt(options?: {\n  preface: string;\n  acknowledgement: string;\n}): ModelMiddleware {\n  const preface = options?.preface || 'SYSTEM INSTRUCTIONS:\\n';\n  const acknowledgement = options?.acknowledgement || 'Understood.';\n\n  return (req, next) => {\n    const messages = [...req.messages];\n    for (let i = 0; i < messages.length; i++) {\n      if (req.messages[i].role === 'system') {\n        const systemPrompt = messages[i].content;\n        messages.splice(\n          i,\n          1,\n          { role: 'user', content: [{ text: preface }, ...systemPrompt] },\n          { role: 'model', content: [{ text: acknowledgement }] }\n        );\n        break;\n      }\n    }\n    return next({ ...req, messages });\n  };\n}\n\nexport interface AugmentWithContextOptions {\n  /** Preceding text to place before the rendered context documents. */\n  preface?: string | null;\n  /** A function to render a document into a text part to be included in the message. */\n  itemTemplate?: (d: Document, options?: AugmentWithContextOptions) => string;\n  /** The metadata key to use for citation reference. Pass `null` to provide no citations. */\n  citationKey?: string | null;\n}\n\nexport const CONTEXT_PREFACE =\n  '\\n\\nUse the following information to complete your task:\\n\\n';\nconst CONTEXT_ITEM_TEMPLATE = (\n  d: Document,\n  index: number,\n  options?: AugmentWithContextOptions\n) => {\n  let out = '- ';\n  if (options?.citationKey) {\n    out += `[${d.metadata![options.citationKey]}]: `;\n  } else if (options?.citationKey === undefined) {\n    out += `[${d.metadata?.['ref'] || d.metadata?.['id'] || index}]: `;\n  }\n  out += d.text() + '\\n';\n  return out;\n};\n\nexport function augmentWithContext(\n  options?: AugmentWithContextOptions\n): ModelMiddleware {\n  const preface =\n    typeof options?.preface === 'undefined' ? CONTEXT_PREFACE : options.preface;\n  const itemTemplate = options?.itemTemplate || CONTEXT_ITEM_TEMPLATE;\n  return (req, next) => {\n    // if there is no context in the request, no-op\n    if (!req.context?.length) return next(req);\n    const userMessage = lastUserMessage(req.messages);\n    // if there are no messages, no-op\n    if (!userMessage) return next(req);\n    // if there is already a context part, no-op\n    const contextPartIndex = userMessage?.content.findIndex(\n      (p) => p.metadata?.purpose === 'context'\n    );\n    const contextPart =\n      contextPartIndex >= 0 && userMessage.content[contextPartIndex];\n\n    if (contextPart && !contextPart.metadata?.pending) {\n      return next(req);\n    }\n    let out = `${preface || ''}`;\n    req.context?.forEach((d, i) => {\n      out += itemTemplate(new Document(d), i, options);\n    });\n    out += '\\n';\n    if (contextPartIndex >= 0) {\n      userMessage.content[contextPartIndex] = {\n        ...contextPart,\n        text: out,\n        metadata: { purpose: 'context' },\n      } as Part;\n    } else {\n      userMessage.content.push({ text: out, metadata: { purpose: 'context' } });\n    }\n\n    return next(req);\n  };\n}\n"],"mappings":"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","names":["_a"]}