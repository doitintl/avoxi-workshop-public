import * as _genkit_ai_ai_embedder from '@genkit-ai/ai/embedder';
import { EmbedderArgument, EmbedderReference } from '@genkit-ai/ai/embedder';
import { GoogleAuth, GoogleAuthOptions } from 'google-auth-library';
import z$1, { z } from 'zod';
import * as _genkit_ai_ai_model from '@genkit-ai/ai/model';
import { ModelReference, MessageData, CandidateData, GenerateRequest, ModelAction } from '@genkit-ai/ai/model';
import { Plugin } from '@genkit-ai/core';
import './anthropic.js';
import { VertexAIEvaluationMetric } from './evaluation.js';
import { HarmCategory, HarmBlockThreshold, Content, GenerateContentCandidate, VertexAI } from '@google-cloud/vertexai';
import './model_garden.js';
import { BigQuery } from '@google-cloud/bigquery';
import * as _genkit_ai_ai_retriever from '@genkit-ai/ai/retriever';
import { Document, IndexerAction, RetrieverAction } from '@genkit-ai/ai/retriever';
import * as aiplatform from '@google-cloud/aiplatform';
import { Firestore } from 'firebase-admin/firestore';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare const GeminiConfigSchema: z.ZodObject<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
    location: z.ZodOptional<z.ZodString>;
    vertexRetrieval: z.ZodOptional<z.ZodObject<{
        datastore: z.ZodObject<{
            projectId: z.ZodOptional<z.ZodString>;
            location: z.ZodOptional<z.ZodString>;
            dataStoreId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }>;
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }>>;
    googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disableAttribution?: boolean | undefined;
    }, {
        disableAttribution?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}>;
declare const geminiPro: ModelReference<z.ZodObject<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
    location: z.ZodOptional<z.ZodString>;
    vertexRetrieval: z.ZodOptional<z.ZodObject<{
        datastore: z.ZodObject<{
            projectId: z.ZodOptional<z.ZodString>;
            location: z.ZodOptional<z.ZodString>;
            dataStoreId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }>;
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }>>;
    googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disableAttribution?: boolean | undefined;
    }, {
        disableAttribution?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}>>;
declare const geminiProVision: ModelReference<z.ZodObject<Omit<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
    location: z.ZodOptional<z.ZodString>;
    vertexRetrieval: z.ZodOptional<z.ZodObject<{
        datastore: z.ZodObject<{
            projectId: z.ZodOptional<z.ZodString>;
            location: z.ZodOptional<z.ZodString>;
            dataStoreId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }>;
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }>>;
    googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disableAttribution?: boolean | undefined;
    }, {
        disableAttribution?: boolean | undefined;
    }>>;
}, "vertexRetrieval" | "googleSearchRetrieval">, "strip", z.ZodTypeAny, {
    location?: string | undefined;
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}, {
    location?: string | undefined;
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}>>;
declare const gemini15Pro: ModelReference<z.ZodObject<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
    location: z.ZodOptional<z.ZodString>;
    vertexRetrieval: z.ZodOptional<z.ZodObject<{
        datastore: z.ZodObject<{
            projectId: z.ZodOptional<z.ZodString>;
            location: z.ZodOptional<z.ZodString>;
            dataStoreId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }>;
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }>>;
    googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disableAttribution?: boolean | undefined;
    }, {
        disableAttribution?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}>>;
declare const gemini15ProPreview: ModelReference<z.ZodObject<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
    location: z.ZodOptional<z.ZodString>;
    vertexRetrieval: z.ZodOptional<z.ZodObject<{
        datastore: z.ZodObject<{
            projectId: z.ZodOptional<z.ZodString>;
            location: z.ZodOptional<z.ZodString>;
            dataStoreId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }>;
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }>>;
    googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disableAttribution?: boolean | undefined;
    }, {
        disableAttribution?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}>>;
declare const gemini15FlashPreview: ModelReference<z.ZodObject<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
    location: z.ZodOptional<z.ZodString>;
    vertexRetrieval: z.ZodOptional<z.ZodObject<{
        datastore: z.ZodObject<{
            projectId: z.ZodOptional<z.ZodString>;
            location: z.ZodOptional<z.ZodString>;
            dataStoreId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }>;
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }>>;
    googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disableAttribution?: boolean | undefined;
    }, {
        disableAttribution?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}>>;
declare const gemini15Flash: ModelReference<z.ZodObject<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
    location: z.ZodOptional<z.ZodString>;
    vertexRetrieval: z.ZodOptional<z.ZodObject<{
        datastore: z.ZodObject<{
            projectId: z.ZodOptional<z.ZodString>;
            location: z.ZodOptional<z.ZodString>;
            dataStoreId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }, {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        }>;
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }, {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    }>>;
    googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
        disableAttribution: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        disableAttribution?: boolean | undefined;
    }, {
        disableAttribution?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
    location?: string | undefined;
    vertexRetrieval?: {
        datastore: {
            dataStoreId: string;
            projectId?: string | undefined;
            location?: string | undefined;
        };
        disableAttribution?: boolean | undefined;
    } | undefined;
    googleSearchRetrieval?: {
        disableAttribution?: boolean | undefined;
    } | undefined;
}>>;
declare const SUPPORTED_V1_MODELS: {
    'gemini-1.0-pro': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.0-pro-vision': ModelReference<z.ZodObject<Omit<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "vertexRetrieval" | "googleSearchRetrieval">, "strip", z.ZodTypeAny, {
        location?: string | undefined;
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        location?: string | undefined;
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
};
declare const SUPPORTED_V15_MODELS: {
    'gemini-1.5-pro': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.5-flash': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.5-pro-preview': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.5-flash-preview': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
};
declare const SUPPORTED_GEMINI_MODELS: {
    'gemini-1.5-pro': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.5-flash': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.5-pro-preview': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.5-flash-preview': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.0-pro': ModelReference<z.ZodObject<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }, {
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
        location?: string | undefined;
        vertexRetrieval?: {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        } | undefined;
        googleSearchRetrieval?: {
            disableAttribution?: boolean | undefined;
        } | undefined;
    }>>;
    'gemini-1.0-pro-vision': ModelReference<z.ZodObject<Omit<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
        location: z.ZodOptional<z.ZodString>;
        vertexRetrieval: z.ZodOptional<z.ZodObject<{
            datastore: z.ZodObject<{
                projectId: z.ZodOptional<z.ZodString>;
                location: z.ZodOptional<z.ZodString>;
                dataStoreId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }, {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            }>;
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }, {
            datastore: {
                dataStoreId: string;
                projectId?: string | undefined;
                location?: string | undefined;
            };
            disableAttribution?: boolean | undefined;
        }>>;
        googleSearchRetrieval: z.ZodOptional<z.ZodObject<{
            disableAttribution: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            disableAttribution?: boolean | undefined;
        }, {
            disableAttribution?: boolean | undefined;
        }>>;
    }, "vertexRetrieval" | "googleSearchRetrieval">, "strip", z.ZodTypeAny, {
        location?: string | undefined;
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        location?: string | undefined;
        version?: string | undefined;
        temperature?: number | undefined;
        maxOutputTokens?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        stopSequences?: string[] | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
};
declare function toGeminiSystemInstruction(message: MessageData): Content;
declare function toGeminiMessage(message: MessageData, model?: ModelReference<z.ZodTypeAny>): Content;
declare function fromGeminiCandidate(candidate: GenerateContentCandidate): CandidateData;
/**
 *
 */
declare function geminiModel(name: string, vertexClientFactory: (request: GenerateRequest<typeof GeminiConfigSchema>) => VertexAI, options: PluginOptions): ModelAction;

declare const imagen2: _genkit_ai_ai_model.ModelReference<z$1.ZodObject<{
    version: z$1.ZodOptional<z$1.ZodString>;
    temperature: z$1.ZodOptional<z$1.ZodNumber>;
    maxOutputTokens: z$1.ZodOptional<z$1.ZodNumber>;
    topK: z$1.ZodOptional<z$1.ZodNumber>;
    topP: z$1.ZodOptional<z$1.ZodNumber>;
    stopSequences: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
    language: z$1.ZodOptional<z$1.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    aspectRatio: z$1.ZodOptional<z$1.ZodEnum<["1:1", "9:16", "16:9"]>>;
    negativePrompt: z$1.ZodOptional<z$1.ZodString>;
    seed: z$1.ZodOptional<z$1.ZodNumber>;
    location: z$1.ZodOptional<z$1.ZodString>;
}, "strip", z$1.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
    location?: string | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
    location?: string | undefined;
}>>;
declare function imagen2Model(client: GoogleAuth, options: PluginOptions): _genkit_ai_ai_model.ModelAction<z$1.ZodObject<{
    version: z$1.ZodOptional<z$1.ZodString>;
    temperature: z$1.ZodOptional<z$1.ZodNumber>;
    maxOutputTokens: z$1.ZodOptional<z$1.ZodNumber>;
    topK: z$1.ZodOptional<z$1.ZodNumber>;
    topP: z$1.ZodOptional<z$1.ZodNumber>;
    stopSequences: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
    language: z$1.ZodOptional<z$1.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    aspectRatio: z$1.ZodOptional<z$1.ZodEnum<["1:1", "9:16", "16:9"]>>;
    negativePrompt: z$1.ZodOptional<z$1.ZodString>;
    seed: z$1.ZodOptional<z$1.ZodNumber>;
    location: z$1.ZodOptional<z$1.ZodString>;
}, "strip", z$1.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
    location?: string | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
    location?: string | undefined;
}>>;

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface VertexVectorSearchOptions<EmbedderCustomOptions extends z$1.ZodTypeAny> {
    pluginOptions: PluginOptions;
    authClient: GoogleAuth;
    defaultEmbedder: EmbedderArgument<EmbedderCustomOptions>;
}
type IIndexDatapoint = aiplatform.protos.google.cloud.aiplatform.v1.IIndexDatapoint;
declare class Datapoint extends aiplatform.protos.google.cloud.aiplatform.v1
    .IndexDatapoint {
    constructor(properties: IIndexDatapoint);
}
type IFindNeighborsRequest = aiplatform.protos.google.cloud.aiplatform.v1.IFindNeighborsRequest;
type IFindNeighborsResponse = aiplatform.protos.google.cloud.aiplatform.v1.IFindNeighborsResponse;
type ISparseEmbedding = aiplatform.protos.google.cloud.aiplatform.v1.IndexDatapoint.ISparseEmbedding;
type IRestriction = aiplatform.protos.google.cloud.aiplatform.v1.IndexDatapoint.IRestriction;
type INumericRestriction = aiplatform.protos.google.cloud.aiplatform.v1.IndexDatapoint.INumericRestriction;
declare const SparseEmbeddingSchema: z$1.ZodObject<{
    values: z$1.ZodOptional<z$1.ZodArray<z$1.ZodNumber, "many">>;
    dimensions: z$1.ZodOptional<z$1.ZodArray<z$1.ZodUnion<[z$1.ZodNumber, z$1.ZodString]>, "many">>;
}, "strip", z$1.ZodTypeAny, {
    values?: number[] | undefined;
    dimensions?: (string | number)[] | undefined;
}, {
    values?: number[] | undefined;
    dimensions?: (string | number)[] | undefined;
}>;
type SparseEmbedding = z$1.infer<typeof SparseEmbeddingSchema>;
declare const RestrictionSchema: z$1.ZodObject<{
    namespace: z$1.ZodOptional<z$1.ZodString>;
    allowList: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
    denyList: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
}, "strip", z$1.ZodTypeAny, {
    namespace?: string | undefined;
    allowList?: string[] | undefined;
    denyList?: string[] | undefined;
}, {
    namespace?: string | undefined;
    allowList?: string[] | undefined;
    denyList?: string[] | undefined;
}>;
type Restriction = z$1.infer<typeof RestrictionSchema>;
declare const NumericRestrictionSchema: z$1.ZodObject<{
    valueInt: z$1.ZodOptional<z$1.ZodUnion<[z$1.ZodNumber, z$1.ZodString]>>;
    valueFloat: z$1.ZodOptional<z$1.ZodNumber>;
    valueDouble: z$1.ZodOptional<z$1.ZodNumber>;
    namespace: z$1.ZodOptional<z$1.ZodString>;
    op: z$1.ZodOptional<z$1.ZodUnion<[z$1.ZodEnum<["OPERATOR_UNSPECIFIED", "LESS", "LESS_EQUAL", "EQUAL", "GREATER_EQUAL", "GREATER", "NOT_EQUAL"]>, z$1.ZodNull]>>;
}, "strip", z$1.ZodTypeAny, {
    valueInt?: string | number | undefined;
    valueFloat?: number | undefined;
    valueDouble?: number | undefined;
    namespace?: string | undefined;
    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
}, {
    valueInt?: string | number | undefined;
    valueFloat?: number | undefined;
    valueDouble?: number | undefined;
    namespace?: string | undefined;
    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
}>;
type NumericRestriction = z$1.infer<typeof NumericRestrictionSchema>;
declare const CrowdingTagSchema: z$1.ZodObject<{
    crowdingAttribute: z$1.ZodOptional<z$1.ZodString>;
}, "strip", z$1.ZodTypeAny, {
    crowdingAttribute?: string | undefined;
}, {
    crowdingAttribute?: string | undefined;
}>;
type CrowdingTag = z$1.infer<typeof CrowdingTagSchema>;
declare const NeighborSchema: z$1.ZodObject<{
    datapoint: z$1.ZodOptional<z$1.ZodObject<{
        datapointId: z$1.ZodOptional<z$1.ZodString>;
        featureVector: z$1.ZodOptional<z$1.ZodArray<z$1.ZodNumber, "many">>;
        sparseEmbedding: z$1.ZodOptional<z$1.ZodObject<{
            values: z$1.ZodOptional<z$1.ZodArray<z$1.ZodNumber, "many">>;
            dimensions: z$1.ZodOptional<z$1.ZodArray<z$1.ZodUnion<[z$1.ZodNumber, z$1.ZodString]>, "many">>;
        }, "strip", z$1.ZodTypeAny, {
            values?: number[] | undefined;
            dimensions?: (string | number)[] | undefined;
        }, {
            values?: number[] | undefined;
            dimensions?: (string | number)[] | undefined;
        }>>;
        restricts: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
            namespace: z$1.ZodOptional<z$1.ZodString>;
            allowList: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
            denyList: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
        }, "strip", z$1.ZodTypeAny, {
            namespace?: string | undefined;
            allowList?: string[] | undefined;
            denyList?: string[] | undefined;
        }, {
            namespace?: string | undefined;
            allowList?: string[] | undefined;
            denyList?: string[] | undefined;
        }>, "many">>;
        numericRestricts: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
            valueInt: z$1.ZodOptional<z$1.ZodUnion<[z$1.ZodNumber, z$1.ZodString]>>;
            valueFloat: z$1.ZodOptional<z$1.ZodNumber>;
            valueDouble: z$1.ZodOptional<z$1.ZodNumber>;
            namespace: z$1.ZodOptional<z$1.ZodString>;
            op: z$1.ZodOptional<z$1.ZodUnion<[z$1.ZodEnum<["OPERATOR_UNSPECIFIED", "LESS", "LESS_EQUAL", "EQUAL", "GREATER_EQUAL", "GREATER", "NOT_EQUAL"]>, z$1.ZodNull]>>;
        }, "strip", z$1.ZodTypeAny, {
            valueInt?: string | number | undefined;
            valueFloat?: number | undefined;
            valueDouble?: number | undefined;
            namespace?: string | undefined;
            op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
        }, {
            valueInt?: string | number | undefined;
            valueFloat?: number | undefined;
            valueDouble?: number | undefined;
            namespace?: string | undefined;
            op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
        }>, "many">>;
        crowdingTag: z$1.ZodOptional<z$1.ZodObject<{
            crowdingAttribute: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            crowdingAttribute?: string | undefined;
        }, {
            crowdingAttribute?: string | undefined;
        }>>;
    }, "strip", z$1.ZodTypeAny, {
        datapointId?: string | undefined;
        featureVector?: number[] | undefined;
        sparseEmbedding?: {
            values?: number[] | undefined;
            dimensions?: (string | number)[] | undefined;
        } | undefined;
        restricts?: {
            namespace?: string | undefined;
            allowList?: string[] | undefined;
            denyList?: string[] | undefined;
        }[] | undefined;
        numericRestricts?: {
            valueInt?: string | number | undefined;
            valueFloat?: number | undefined;
            valueDouble?: number | undefined;
            namespace?: string | undefined;
            op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
        }[] | undefined;
        crowdingTag?: {
            crowdingAttribute?: string | undefined;
        } | undefined;
    }, {
        datapointId?: string | undefined;
        featureVector?: number[] | undefined;
        sparseEmbedding?: {
            values?: number[] | undefined;
            dimensions?: (string | number)[] | undefined;
        } | undefined;
        restricts?: {
            namespace?: string | undefined;
            allowList?: string[] | undefined;
            denyList?: string[] | undefined;
        }[] | undefined;
        numericRestricts?: {
            valueInt?: string | number | undefined;
            valueFloat?: number | undefined;
            valueDouble?: number | undefined;
            namespace?: string | undefined;
            op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
        }[] | undefined;
        crowdingTag?: {
            crowdingAttribute?: string | undefined;
        } | undefined;
    }>>;
    distance: z$1.ZodOptional<z$1.ZodNumber>;
    sparseDistance: z$1.ZodOptional<z$1.ZodNumber>;
}, "strip", z$1.ZodTypeAny, {
    datapoint?: {
        datapointId?: string | undefined;
        featureVector?: number[] | undefined;
        sparseEmbedding?: {
            values?: number[] | undefined;
            dimensions?: (string | number)[] | undefined;
        } | undefined;
        restricts?: {
            namespace?: string | undefined;
            allowList?: string[] | undefined;
            denyList?: string[] | undefined;
        }[] | undefined;
        numericRestricts?: {
            valueInt?: string | number | undefined;
            valueFloat?: number | undefined;
            valueDouble?: number | undefined;
            namespace?: string | undefined;
            op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
        }[] | undefined;
        crowdingTag?: {
            crowdingAttribute?: string | undefined;
        } | undefined;
    } | undefined;
    distance?: number | undefined;
    sparseDistance?: number | undefined;
}, {
    datapoint?: {
        datapointId?: string | undefined;
        featureVector?: number[] | undefined;
        sparseEmbedding?: {
            values?: number[] | undefined;
            dimensions?: (string | number)[] | undefined;
        } | undefined;
        restricts?: {
            namespace?: string | undefined;
            allowList?: string[] | undefined;
            denyList?: string[] | undefined;
        }[] | undefined;
        numericRestricts?: {
            valueInt?: string | number | undefined;
            valueFloat?: number | undefined;
            valueDouble?: number | undefined;
            namespace?: string | undefined;
            op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
        }[] | undefined;
        crowdingTag?: {
            crowdingAttribute?: string | undefined;
        } | undefined;
    } | undefined;
    distance?: number | undefined;
    sparseDistance?: number | undefined;
}>;
type Neighbor = z$1.infer<typeof NeighborSchema>;
declare const FindNeighborsResponseSchema: z$1.ZodObject<{
    nearestNeighbors: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
        id: z$1.ZodOptional<z$1.ZodString>;
        neighbors: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
            datapoint: z$1.ZodOptional<z$1.ZodObject<{
                datapointId: z$1.ZodOptional<z$1.ZodString>;
                featureVector: z$1.ZodOptional<z$1.ZodArray<z$1.ZodNumber, "many">>;
                sparseEmbedding: z$1.ZodOptional<z$1.ZodObject<{
                    values: z$1.ZodOptional<z$1.ZodArray<z$1.ZodNumber, "many">>;
                    dimensions: z$1.ZodOptional<z$1.ZodArray<z$1.ZodUnion<[z$1.ZodNumber, z$1.ZodString]>, "many">>;
                }, "strip", z$1.ZodTypeAny, {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                }, {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                }>>;
                restricts: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
                    namespace: z$1.ZodOptional<z$1.ZodString>;
                    allowList: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
                    denyList: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
                }, "strip", z$1.ZodTypeAny, {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }, {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }>, "many">>;
                numericRestricts: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
                    valueInt: z$1.ZodOptional<z$1.ZodUnion<[z$1.ZodNumber, z$1.ZodString]>>;
                    valueFloat: z$1.ZodOptional<z$1.ZodNumber>;
                    valueDouble: z$1.ZodOptional<z$1.ZodNumber>;
                    namespace: z$1.ZodOptional<z$1.ZodString>;
                    op: z$1.ZodOptional<z$1.ZodUnion<[z$1.ZodEnum<["OPERATOR_UNSPECIFIED", "LESS", "LESS_EQUAL", "EQUAL", "GREATER_EQUAL", "GREATER", "NOT_EQUAL"]>, z$1.ZodNull]>>;
                }, "strip", z$1.ZodTypeAny, {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }, {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }>, "many">>;
                crowdingTag: z$1.ZodOptional<z$1.ZodObject<{
                    crowdingAttribute: z$1.ZodOptional<z$1.ZodString>;
                }, "strip", z$1.ZodTypeAny, {
                    crowdingAttribute?: string | undefined;
                }, {
                    crowdingAttribute?: string | undefined;
                }>>;
            }, "strip", z$1.ZodTypeAny, {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            }, {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            }>>;
            distance: z$1.ZodOptional<z$1.ZodNumber>;
            sparseDistance: z$1.ZodOptional<z$1.ZodNumber>;
        }, "strip", z$1.ZodTypeAny, {
            datapoint?: {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            } | undefined;
            distance?: number | undefined;
            sparseDistance?: number | undefined;
        }, {
            datapoint?: {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            } | undefined;
            distance?: number | undefined;
            sparseDistance?: number | undefined;
        }>, "many">>;
    }, "strip", z$1.ZodTypeAny, {
        id?: string | undefined;
        neighbors?: {
            datapoint?: {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            } | undefined;
            distance?: number | undefined;
            sparseDistance?: number | undefined;
        }[] | undefined;
    }, {
        id?: string | undefined;
        neighbors?: {
            datapoint?: {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            } | undefined;
            distance?: number | undefined;
            sparseDistance?: number | undefined;
        }[] | undefined;
    }>, "many">>;
}, "strip", z$1.ZodTypeAny, {
    nearestNeighbors?: {
        id?: string | undefined;
        neighbors?: {
            datapoint?: {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            } | undefined;
            distance?: number | undefined;
            sparseDistance?: number | undefined;
        }[] | undefined;
    }[] | undefined;
}, {
    nearestNeighbors?: {
        id?: string | undefined;
        neighbors?: {
            datapoint?: {
                datapointId?: string | undefined;
                featureVector?: number[] | undefined;
                sparseEmbedding?: {
                    values?: number[] | undefined;
                    dimensions?: (string | number)[] | undefined;
                } | undefined;
                restricts?: {
                    namespace?: string | undefined;
                    allowList?: string[] | undefined;
                    denyList?: string[] | undefined;
                }[] | undefined;
                numericRestricts?: {
                    valueInt?: string | number | undefined;
                    valueFloat?: number | undefined;
                    valueDouble?: number | undefined;
                    namespace?: string | undefined;
                    op?: "OPERATOR_UNSPECIFIED" | "LESS" | "LESS_EQUAL" | "EQUAL" | "GREATER_EQUAL" | "GREATER" | "NOT_EQUAL" | null | undefined;
                }[] | undefined;
                crowdingTag?: {
                    crowdingAttribute?: string | undefined;
                } | undefined;
            } | undefined;
            distance?: number | undefined;
            sparseDistance?: number | undefined;
        }[] | undefined;
    }[] | undefined;
}>;
type FindNeighborsResponse = z$1.infer<typeof FindNeighborsResponseSchema>;
declare const VertexAIVectorRetrieverOptionsSchema: z$1.ZodOptional<z$1.ZodObject<{
    k: z$1.ZodOptional<z$1.ZodNumber>;
}, "strip", z$1.ZodTypeAny, {
    k?: number | undefined;
}, {
    k?: number | undefined;
}>>;
type VertexAIVectorRetrieverOptions = z$1.infer<typeof VertexAIVectorRetrieverOptionsSchema>;
declare const VertexAIVectorIndexerOptionsSchema: z$1.ZodAny;
type VertexAIVectorIndexerOptions = z$1.infer<typeof VertexAIVectorIndexerOptionsSchema>;
/**
 * A document retriever function that takes an array of Neighbors from Vertex AI Vector Search query result, and resolves to a list of documents.
 * Also takes an options object that can be used to configure the retriever.
 */
type DocumentRetriever<Options extends {
    k?: number;
} = {
    k?: number;
}> = (docIds: Neighbor[], options?: Options) => Promise<Document[]>;
/**
 * Indexer function that takes an array of documents, stores them in a database of the user's choice, and resolves to a list of document ids.
 * Also takes an options object that can be used to configure the indexer.
 */
type DocumentIndexer<Options extends {} = {}> = (docs: Document[], options?: Options) => Promise<string[]>;
interface VectorSearchOptions<EmbedderCustomOptions extends z$1.ZodTypeAny, IndexerOptions extends {}, RetrieverOptions extends {
    k?: number;
}> {
    deployedIndexId: string;
    indexEndpointId: string;
    publicDomainName: string;
    indexId: string;
    documentRetriever: DocumentRetriever<RetrieverOptions>;
    documentIndexer: DocumentIndexer<IndexerOptions>;
    embedder?: EmbedderArgument<EmbedderCustomOptions>;
    embedderOptions?: z$1.infer<EmbedderCustomOptions>;
}

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Creates a BigQuery Document Retriever.
 *
 * This function returns a DocumentRetriever function that retrieves documents
 * from a BigQuery table based on the provided neighbors.
 *
 * @param {BigQuery} bq - The BigQuery instance.
 * @param {string} tableId - The ID of the BigQuery table.
 * @param {string} datasetId - The ID of the BigQuery dataset.
 * @returns {DocumentRetriever} - The DocumentRetriever function.
 */
declare const getBigQueryDocumentRetriever: (bq: BigQuery, tableId: string, datasetId: string) => DocumentRetriever;
/**
 * Creates a BigQuery Document Indexer.
 *
 * This function returns a DocumentIndexer function that indexes documents
 * into a BigQuery table. Note this indexer does not handle duplicate
 * documents.
 *
 * @param {BigQuery} bq - The BigQuery instance.
 * @param {string} tableId - The ID of the BigQuery table.
 * @param {string} datasetId - The ID of the BigQuery dataset.
 * @returns {DocumentIndexer} - The DocumentIndexer function.
 */
declare const getBigQueryDocumentIndexer: (bq: BigQuery, tableId: string, datasetId: string) => DocumentIndexer;

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Creates a Firestore Document Retriever.
 *
 * This function returns a DocumentRetriever function that retrieves documents
 * from a Firestore collection based on the provided Vertex AI Vector Search neighbors.
 *
 * @param {Firestore} db - The Firestore instance.
 * @param {string} collectionName - The name of the Firestore collection.
 * @returns {DocumentRetriever} - The DocumentRetriever function.
 */
declare const getFirestoreDocumentRetriever: (db: Firestore, collectionName: string) => DocumentRetriever;
/**
 * Creates a Firestore Document Indexer.
 *
 * This function returns a DocumentIndexer function that indexes documents
 * into a Firestore collection.
 *
 * @param {Firestore} db - The Firestore instance.
 * @param {string} collectionName - The name of the Firestore collection.
 * @returns {DocumentIndexer} - The DocumentIndexer function.
 */
declare const getFirestoreDocumentIndexer: (db: Firestore, collectionName: string) => DocumentIndexer<{}>;

/**
 * Creates a reference to a Vertex AI indexer.
 *
 * @param {Object} params - The parameters for the indexer reference.
 * @param {string} params.indexId - The ID of the Vertex AI index.
 * @param {string} [params.displayName] - An optional display name for the indexer.
 * @returns {Object} - The indexer reference object.
 */
declare const vertexAiIndexerRef: (params: {
    indexId: string;
    displayName?: string;
}) => _genkit_ai_ai_retriever.IndexerReference<z$1.ZodOptional<z$1.ZodAny>>;
/**
 * Creates Vertex AI indexers.
 *
 * This function returns a list of indexer actions for Vertex AI based on the provided
 * vector search options and embedder configurations.
 *
 * @param {VertexVectorSearchOptions<EmbedderCustomOptions>} params - The parameters for creating the indexers.
 * @returns {IndexerAction<z.ZodTypeAny>[]} - An array of indexer actions.
 */
declare function vertexAiIndexers<EmbedderCustomOptions extends z$1.ZodTypeAny>(params: VertexVectorSearchOptions<EmbedderCustomOptions>): IndexerAction<z$1.ZodTypeAny>[];

/**
 * Creates Vertex AI retrievers.
 *
 * This function returns a list of retriever actions for Vertex AI based on the provided
 * vector search options and embedder configurations.
 *
 * @param {VertexVectorSearchOptions<EmbedderCustomOptions>} params - The parameters for creating the retrievers.
 * @returns {RetrieverAction<z.ZodTypeAny>[]} - An array of retriever actions.
 */
declare function vertexAiRetrievers<EmbedderCustomOptions extends z$1.ZodTypeAny>(params: VertexVectorSearchOptions<EmbedderCustomOptions>): RetrieverAction<z$1.ZodTypeAny>[];
/**
 * Creates a reference to a Vertex AI retriever.
 *
 * @param {Object} params - The parameters for the retriever reference.
 * @param {string} params.indexId - The ID of the Vertex AI index.
 * @param {string} [params.displayName] - An optional display name for the retriever.
 * @returns {Object} - The retriever reference object.
 */
declare const vertexAiRetrieverRef: (params: {
    indexId: string;
    displayName?: string;
}) => _genkit_ai_ai_retriever.RetrieverReference<z$1.ZodOptional<z$1.ZodOptional<z$1.ZodObject<{
    k: z$1.ZodOptional<z$1.ZodNumber>;
}, "strip", z$1.ZodTypeAny, {
    k?: number | undefined;
}, {
    k?: number | undefined;
}>>>>;

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface PluginOptions {
    /** The Google Cloud project id to call. */
    projectId?: string;
    /** The Google Cloud region to call. */
    location: string;
    /** Provide custom authentication configuration for connecting to Vertex AI. */
    googleAuth?: GoogleAuthOptions;
    /** Configure Vertex AI evaluators */
    evaluation?: {
        metrics: VertexAIEvaluationMetric[];
    };
    /**
     * @deprecated use `modelGarden.models`
     */
    modelGardenModels?: ModelReference<any>[];
    modelGarden?: {
        models: ModelReference<any>[];
        openAiBaseUrlTemplate?: string;
    };
    /** Configure Vertex AI vector search index options */
    vectorSearchOptions?: VectorSearchOptions<z$1.ZodTypeAny, any, any>[];
}
/**
 * Add Google Cloud Vertex AI to Genkit. Includes Gemini and Imagen models and text embedder.
 */
declare const vertexAI: Plugin<[PluginOptions] | []>;

declare const TaskTypeSchema: z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>;
type TaskType = z.infer<typeof TaskTypeSchema>;
declare const TextEmbeddingGeckoConfigSchema: z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>;
type TextEmbeddingGeckoConfig = z.infer<typeof TextEmbeddingGeckoConfigSchema>;
declare const textEmbeddingGecko003: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>>;
declare const textEmbeddingGecko002: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>>;
declare const textEmbeddingGecko001: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>>;
declare const textEmbedding004: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>>;
declare const textMultilingualEmbedding002: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>>;
declare const textEmbeddingGeckoMultilingual001: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>>;
declare const textEmbeddingGecko: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
    location?: string | undefined;
}>>;
declare const SUPPORTED_EMBEDDER_MODELS: Record<string, EmbedderReference>;
declare function textEmbeddingGeckoEmbedder(name: string, client: GoogleAuth, options: PluginOptions): _genkit_ai_ai_embedder.EmbedderAction<z.ZodTypeAny>;

export { textEmbeddingGecko as $, FindNeighborsResponseSchema as A, VertexAIVectorRetrieverOptionsSchema as B, CrowdingTagSchema as C, Datapoint as D, type VertexAIVectorRetrieverOptions as E, type FindNeighborsResponse as F, GeminiConfigSchema as G, VertexAIVectorIndexerOptionsSchema as H, type IIndexDatapoint as I, type VertexAIVectorIndexerOptions as J, type DocumentRetriever as K, type DocumentIndexer as L, type VectorSearchOptions as M, NumericRestrictionSchema as N, getBigQueryDocumentRetriever as O, type PluginOptions as P, getBigQueryDocumentIndexer as Q, RestrictionSchema as R, SUPPORTED_V1_MODELS as S, getFirestoreDocumentRetriever as T, getFirestoreDocumentIndexer as U, type VertexVectorSearchOptions as V, vertexAiIndexerRef as W, vertexAiIndexers as X, vertexAiRetrievers as Y, vertexAiRetrieverRef as Z, textEmbedding004 as _, geminiProVision as a, textEmbeddingGecko001 as a0, textEmbeddingGecko002 as a1, textEmbeddingGecko003 as a2, textEmbeddingGeckoMultilingual001 as a3, textMultilingualEmbedding002 as a4, vertexAI as a5, TaskTypeSchema as a6, type TaskType as a7, TextEmbeddingGeckoConfigSchema as a8, type TextEmbeddingGeckoConfig as a9, SUPPORTED_EMBEDDER_MODELS as aa, textEmbeddingGeckoEmbedder as ab, gemini15Pro as b, gemini15ProPreview as c, gemini15FlashPreview as d, gemini15Flash as e, SUPPORTED_V15_MODELS as f, geminiPro as g, SUPPORTED_GEMINI_MODELS as h, toGeminiMessage as i, fromGeminiCandidate as j, geminiModel as k, imagen2 as l, imagen2Model as m, type IFindNeighborsRequest as n, type IFindNeighborsResponse as o, type ISparseEmbedding as p, type IRestriction as q, type INumericRestriction as r, SparseEmbeddingSchema as s, toGeminiSystemInstruction as t, type SparseEmbedding as u, type Restriction as v, type NumericRestriction as w, type CrowdingTag as x, NeighborSchema as y, type Neighbor as z };
