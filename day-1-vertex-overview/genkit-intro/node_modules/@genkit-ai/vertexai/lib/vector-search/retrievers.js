"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var retrievers_exports = {};
__export(retrievers_exports, {
  vertexAiRetrieverRef: () => vertexAiRetrieverRef,
  vertexAiRetrievers: () => vertexAiRetrievers
});
module.exports = __toCommonJS(retrievers_exports);
var import_embedder = require("@genkit-ai/ai/embedder");
var import_retriever = require("@genkit-ai/ai/retriever");
var import_query_public_endpoint = require("./query_public_endpoint");
var import_types = require("./types");
var import_utils = require("./utils");
const DEFAULT_K = 10;
function vertexAiRetrievers(params) {
  var _a;
  const vectorSearchOptions = params.pluginOptions.vectorSearchOptions;
  const defaultEmbedder = params.defaultEmbedder;
  const retrievers = [];
  if (!vectorSearchOptions || vectorSearchOptions.length === 0) {
    return retrievers;
  }
  for (const vectorSearchOption of vectorSearchOptions) {
    const { documentRetriever, indexId, publicDomainName } = vectorSearchOption;
    const embedder = (_a = vectorSearchOption.embedder) != null ? _a : defaultEmbedder;
    const embedderOptions = vectorSearchOption.embedderOptions;
    const retriever = (0, import_retriever.defineRetriever)(
      {
        name: `vertexai/${indexId}`,
        configSchema: import_types.VertexAIVectorRetrieverOptionsSchema.optional()
      },
      (content, options) => __async(this, null, function* () {
        const queryEmbeddings = yield (0, import_embedder.embed)({
          embedder,
          options: embedderOptions,
          content
        });
        const accessToken = yield params.authClient.getAccessToken();
        if (!accessToken) {
          throw new Error(
            "Error generating access token when defining Vertex AI retriever"
          );
        }
        const projectId = params.pluginOptions.projectId;
        if (!projectId) {
          throw new Error(
            "Project ID is required to define Vertex AI retriever"
          );
        }
        const projectNumber = yield (0, import_utils.getProjectNumber)(projectId);
        const location = params.pluginOptions.location;
        if (!location) {
          throw new Error("Location is required to define Vertex AI retriever");
        }
        let res = yield (0, import_query_public_endpoint.queryPublicEndpoint)({
          featureVector: queryEmbeddings,
          neighborCount: (options == null ? void 0 : options.k) || DEFAULT_K,
          accessToken,
          projectId,
          location,
          publicDomainName,
          projectNumber,
          indexEndpointId: vectorSearchOption.indexEndpointId,
          deployedIndexId: vectorSearchOption.deployedIndexId
        });
        const nearestNeighbors = res.nearestNeighbors;
        const queryRes = nearestNeighbors ? nearestNeighbors[0] : null;
        const neighbors = queryRes ? queryRes.neighbors : null;
        if (!neighbors) {
          return { documents: [] };
        }
        const documents = yield documentRetriever(neighbors, options);
        return { documents };
      })
    );
    retrievers.push(retriever);
  }
  return retrievers;
}
const vertexAiRetrieverRef = (params) => {
  var _a;
  return (0, import_retriever.retrieverRef)({
    name: `vertexai/${params.indexId}`,
    info: {
      label: (_a = params.displayName) != null ? _a : `ertex AI - ${params.indexId}`
    },
    configSchema: import_types.VertexAIVectorRetrieverOptionsSchema.optional()
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  vertexAiRetrieverRef,
  vertexAiRetrievers
});
//# sourceMappingURL=retrievers.js.map