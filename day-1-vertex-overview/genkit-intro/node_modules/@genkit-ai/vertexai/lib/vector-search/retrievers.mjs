import {
  __async
} from "../chunk-WFI2LP4G.mjs";
import { embed } from "@genkit-ai/ai/embedder";
import {
  defineRetriever,
  retrieverRef
} from "@genkit-ai/ai/retriever";
import { queryPublicEndpoint } from "./query_public_endpoint";
import {
  VertexAIVectorRetrieverOptionsSchema
} from "./types";
import { getProjectNumber } from "./utils";
const DEFAULT_K = 10;
function vertexAiRetrievers(params) {
  var _a;
  const vectorSearchOptions = params.pluginOptions.vectorSearchOptions;
  const defaultEmbedder = params.defaultEmbedder;
  const retrievers = [];
  if (!vectorSearchOptions || vectorSearchOptions.length === 0) {
    return retrievers;
  }
  for (const vectorSearchOption of vectorSearchOptions) {
    const { documentRetriever, indexId, publicDomainName } = vectorSearchOption;
    const embedder = (_a = vectorSearchOption.embedder) != null ? _a : defaultEmbedder;
    const embedderOptions = vectorSearchOption.embedderOptions;
    const retriever = defineRetriever(
      {
        name: `vertexai/${indexId}`,
        configSchema: VertexAIVectorRetrieverOptionsSchema.optional()
      },
      (content, options) => __async(this, null, function* () {
        const queryEmbeddings = yield embed({
          embedder,
          options: embedderOptions,
          content
        });
        const accessToken = yield params.authClient.getAccessToken();
        if (!accessToken) {
          throw new Error(
            "Error generating access token when defining Vertex AI retriever"
          );
        }
        const projectId = params.pluginOptions.projectId;
        if (!projectId) {
          throw new Error(
            "Project ID is required to define Vertex AI retriever"
          );
        }
        const projectNumber = yield getProjectNumber(projectId);
        const location = params.pluginOptions.location;
        if (!location) {
          throw new Error("Location is required to define Vertex AI retriever");
        }
        let res = yield queryPublicEndpoint({
          featureVector: queryEmbeddings,
          neighborCount: (options == null ? void 0 : options.k) || DEFAULT_K,
          accessToken,
          projectId,
          location,
          publicDomainName,
          projectNumber,
          indexEndpointId: vectorSearchOption.indexEndpointId,
          deployedIndexId: vectorSearchOption.deployedIndexId
        });
        const nearestNeighbors = res.nearestNeighbors;
        const queryRes = nearestNeighbors ? nearestNeighbors[0] : null;
        const neighbors = queryRes ? queryRes.neighbors : null;
        if (!neighbors) {
          return { documents: [] };
        }
        const documents = yield documentRetriever(neighbors, options);
        return { documents };
      })
    );
    retrievers.push(retriever);
  }
  return retrievers;
}
const vertexAiRetrieverRef = (params) => {
  var _a;
  return retrieverRef({
    name: `vertexai/${params.indexId}`,
    info: {
      label: (_a = params.displayName) != null ? _a : `ertex AI - ${params.indexId}`
    },
    configSchema: VertexAIVectorRetrieverOptionsSchema.optional()
  });
};
export {
  vertexAiRetrieverRef,
  vertexAiRetrievers
};
//# sourceMappingURL=retrievers.mjs.map