{"version":3,"sources":["../../src/vector-search/indexers.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { embedMany } from '@genkit-ai/ai/embedder';\nimport {\n  defineIndexer,\n  IndexerAction,\n  indexerRef,\n} from '@genkit-ai/ai/retriever';\nimport z from 'zod';\nimport {\n  Datapoint,\n  VertexAIVectorIndexerOptionsSchema,\n  VertexVectorSearchOptions,\n} from './types';\nimport { upsertDatapoints } from './upsert_datapoints';\n\n/**\n * Creates a reference to a Vertex AI indexer.\n *\n * @param {Object} params - The parameters for the indexer reference.\n * @param {string} params.indexId - The ID of the Vertex AI index.\n * @param {string} [params.displayName] - An optional display name for the indexer.\n * @returns {Object} - The indexer reference object.\n */\nexport const vertexAiIndexerRef = (params: {\n  indexId: string;\n  displayName?: string;\n}) => {\n  return indexerRef({\n    name: `vertexai/${params.indexId}`,\n    info: {\n      label: params.displayName ?? `Vertex AI - ${params.indexId}`,\n    },\n    configSchema: VertexAIVectorIndexerOptionsSchema.optional(),\n  });\n};\n\n/**\n * Creates Vertex AI indexers.\n *\n * This function returns a list of indexer actions for Vertex AI based on the provided\n * vector search options and embedder configurations.\n *\n * @param {VertexVectorSearchOptions<EmbedderCustomOptions>} params - The parameters for creating the indexers.\n * @returns {IndexerAction<z.ZodTypeAny>[]} - An array of indexer actions.\n */\nexport function vertexAiIndexers<EmbedderCustomOptions extends z.ZodTypeAny>(\n  params: VertexVectorSearchOptions<EmbedderCustomOptions>\n): IndexerAction<z.ZodTypeAny>[] {\n  const vectorSearchOptions = params.pluginOptions.vectorSearchOptions;\n  const defaultEmbedder = params.defaultEmbedder;\n  const indexers: IndexerAction<z.ZodTypeAny>[] = [];\n\n  if (!vectorSearchOptions || vectorSearchOptions.length === 0) {\n    return indexers;\n  }\n\n  for (const vectorSearchOption of vectorSearchOptions) {\n    const { documentIndexer, indexId } = vectorSearchOption;\n    const embedder = vectorSearchOption.embedder ?? defaultEmbedder;\n    const embedderOptions = vectorSearchOption.embedderOptions;\n\n    const indexer = defineIndexer(\n      {\n        name: `vertexai/${indexId}`,\n        configSchema: VertexAIVectorIndexerOptionsSchema.optional(),\n      },\n      async (docs, options) => {\n        let docIds: string[] = [];\n\n        try {\n          docIds = await documentIndexer(docs, options);\n        } catch (error) {\n          throw new Error(\n            `Error storing your document content/metadata: ${error}`\n          );\n        }\n\n        const embeddings = await embedMany({\n          embedder,\n          content: docs,\n          options: embedderOptions,\n        });\n\n        const datapoints = embeddings.map(\n          ({ embedding }, i) =>\n            new Datapoint({\n              datapointId: docIds[i],\n              featureVector: embedding,\n            })\n        );\n\n        try {\n          await upsertDatapoints({\n            datapoints,\n            authClient: params.authClient,\n            projectId: params.pluginOptions.projectId!,\n            location: params.pluginOptions.location!,\n            indexId: indexId,\n          });\n        } catch (error) {\n          throw error;\n        }\n      }\n    );\n\n    indexers.push(indexer);\n  }\n  return indexers;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,sBAA0B;AAC1B,uBAIO;AAEP,mBAIO;AACP,+BAAiC;AAU1B,MAAM,qBAAqB,CAAC,WAG7B;AAzCN;AA0CE,aAAO,6BAAW;AAAA,IAChB,MAAM,YAAY,OAAO,OAAO;AAAA,IAChC,MAAM;AAAA,MACJ,QAAO,YAAO,gBAAP,YAAsB,eAAe,OAAO,OAAO;AAAA,IAC5D;AAAA,IACA,cAAc,gDAAmC,SAAS;AAAA,EAC5D,CAAC;AACH;AAWO,SAAS,iBACd,QAC+B;AA9DjC;AA+DE,QAAM,sBAAsB,OAAO,cAAc;AACjD,QAAM,kBAAkB,OAAO;AAC/B,QAAM,WAA0C,CAAC;AAEjD,MAAI,CAAC,uBAAuB,oBAAoB,WAAW,GAAG;AAC5D,WAAO;AAAA,EACT;AAEA,aAAW,sBAAsB,qBAAqB;AACpD,UAAM,EAAE,iBAAiB,QAAQ,IAAI;AACrC,UAAM,YAAW,wBAAmB,aAAnB,YAA+B;AAChD,UAAM,kBAAkB,mBAAmB;AAE3C,UAAM,cAAU;AAAA,MACd;AAAA,QACE,MAAM,YAAY,OAAO;AAAA,QACzB,cAAc,gDAAmC,SAAS;AAAA,MAC5D;AAAA,MACA,CAAO,MAAM,YAAY;AACvB,YAAI,SAAmB,CAAC;AAExB,YAAI;AACF,mBAAS,MAAM,gBAAgB,MAAM,OAAO;AAAA,QAC9C,SAAS,OAAO;AACd,gBAAM,IAAI;AAAA,YACR,iDAAiD,KAAK;AAAA,UACxD;AAAA,QACF;AAEA,cAAM,aAAa,UAAM,2BAAU;AAAA,UACjC;AAAA,UACA,SAAS;AAAA,UACT,SAAS;AAAA,QACX,CAAC;AAED,cAAM,aAAa,WAAW;AAAA,UAC5B,CAAC,EAAE,UAAU,GAAG,MACd,IAAI,uBAAU;AAAA,YACZ,aAAa,OAAO,CAAC;AAAA,YACrB,eAAe;AAAA,UACjB,CAAC;AAAA,QACL;AAEA,YAAI;AACF,oBAAM,2CAAiB;AAAA,YACrB;AAAA,YACA,YAAY,OAAO;AAAA,YACnB,WAAW,OAAO,cAAc;AAAA,YAChC,UAAU,OAAO,cAAc;AAAA,YAC/B;AAAA,UACF,CAAC;AAAA,QACH,SAAS,OAAO;AACd,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,aAAS,KAAK,OAAO;AAAA,EACvB;AACA,SAAO;AACT;","names":[]}