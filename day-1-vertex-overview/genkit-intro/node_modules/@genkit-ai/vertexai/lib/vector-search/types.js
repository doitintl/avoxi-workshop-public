"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var types_exports = {};
__export(types_exports, {
  CrowdingTagSchema: () => CrowdingTagSchema,
  Datapoint: () => Datapoint,
  FindNeighborsResponseSchema: () => FindNeighborsResponseSchema,
  NeighborSchema: () => NeighborSchema,
  NumericRestrictionSchema: () => NumericRestrictionSchema,
  RestrictionSchema: () => RestrictionSchema,
  SparseEmbeddingSchema: () => SparseEmbeddingSchema,
  VertexAIVectorIndexerOptionsSchema: () => VertexAIVectorIndexerOptionsSchema,
  VertexAIVectorRetrieverOptionsSchema: () => VertexAIVectorRetrieverOptionsSchema
});
module.exports = __toCommonJS(types_exports);
var import_retriever = require("@genkit-ai/ai/retriever");
var aiplatform = __toESM(require("@google-cloud/aiplatform"));
var import_zod = __toESM(require("zod"));
class Datapoint extends aiplatform.protos.google.cloud.aiplatform.v1.IndexDatapoint {
  constructor(properties) {
    super(properties);
  }
}
const SparseEmbeddingSchema = import_zod.default.object({
  values: import_zod.default.array(import_zod.default.number()).optional(),
  dimensions: import_zod.default.array(import_zod.default.union([import_zod.default.number(), import_zod.default.string()])).optional()
});
const RestrictionSchema = import_zod.default.object({
  namespace: import_zod.default.string().optional(),
  allowList: import_zod.default.array(import_zod.default.string()).optional(),
  denyList: import_zod.default.array(import_zod.default.string()).optional()
});
const NumericRestrictionSchema = import_zod.default.object({
  valueInt: import_zod.default.union([import_zod.default.number(), import_zod.default.string()]).optional(),
  valueFloat: import_zod.default.number().optional(),
  valueDouble: import_zod.default.number().optional(),
  namespace: import_zod.default.string().optional(),
  op: import_zod.default.union([
    import_zod.default.enum([
      "OPERATOR_UNSPECIFIED",
      "LESS",
      "LESS_EQUAL",
      "EQUAL",
      "GREATER_EQUAL",
      "GREATER",
      "NOT_EQUAL"
    ]),
    import_zod.default.null()
  ]).optional()
});
const CrowdingTagSchema = import_zod.default.object({
  crowdingAttribute: import_zod.default.string().optional()
});
const IndexDatapointSchema = import_zod.default.object({
  datapointId: import_zod.default.string().optional(),
  featureVector: import_zod.default.array(import_zod.default.number()).optional(),
  sparseEmbedding: SparseEmbeddingSchema.optional(),
  restricts: import_zod.default.array(RestrictionSchema).optional(),
  numericRestricts: import_zod.default.array(NumericRestrictionSchema).optional(),
  crowdingTag: CrowdingTagSchema.optional()
});
const NeighborSchema = import_zod.default.object({
  datapoint: IndexDatapointSchema.optional(),
  distance: import_zod.default.number().optional(),
  sparseDistance: import_zod.default.number().optional()
});
const NearestNeighborsSchema = import_zod.default.object({
  id: import_zod.default.string().optional(),
  neighbors: import_zod.default.array(NeighborSchema).optional()
});
const FindNeighborsResponseSchema = import_zod.default.object({
  nearestNeighbors: import_zod.default.array(NearestNeighborsSchema).optional()
});
function assertTypeEquality(value) {
}
assertTypeEquality({});
assertTypeEquality({});
const VertexAIVectorRetrieverOptionsSchema = import_retriever.CommonRetrieverOptionsSchema.extend({}).optional();
const VertexAIVectorIndexerOptionsSchema = import_zod.default.any();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CrowdingTagSchema,
  Datapoint,
  FindNeighborsResponseSchema,
  NeighborSchema,
  NumericRestrictionSchema,
  RestrictionSchema,
  SparseEmbeddingSchema,
  VertexAIVectorIndexerOptionsSchema,
  VertexAIVectorRetrieverOptionsSchema
});
//# sourceMappingURL=types.js.map