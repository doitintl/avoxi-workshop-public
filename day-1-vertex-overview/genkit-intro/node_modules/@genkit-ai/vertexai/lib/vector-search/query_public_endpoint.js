"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var query_public_endpoint_exports = {};
__export(query_public_endpoint_exports, {
  queryPublicEndpoint: () => queryPublicEndpoint
});
module.exports = __toCommonJS(query_public_endpoint_exports);
var import_logging = require("@genkit-ai/core/logging");
function queryPublicEndpoint(params) {
  return __async(this, null, function* () {
    const {
      featureVector,
      neighborCount,
      accessToken,
      indexEndpointId,
      publicDomainName,
      projectNumber,
      deployedIndexId,
      location
    } = params;
    const url = new URL(
      `https://${publicDomainName}/v1/projects/${projectNumber}/locations/${location}/indexEndpoints/${indexEndpointId}:findNeighbors`
    );
    const requestBody = {
      deployed_index_id: deployedIndexId,
      queries: [
        {
          datapoint: {
            datapoint_id: "0",
            feature_vector: featureVector
          },
          neighbor_count: neighborCount
        }
      ]
    };
    const response = yield fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${accessToken}`
      },
      body: JSON.stringify(requestBody)
    });
    if (!response.ok) {
      import_logging.logger.error("Error querying index: ", response.statusText);
    }
    return response.json();
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  queryPublicEndpoint
});
//# sourceMappingURL=query_public_endpoint.js.map