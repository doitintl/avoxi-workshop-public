"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var indexers_exports = {};
__export(indexers_exports, {
  vertexAiIndexerRef: () => vertexAiIndexerRef,
  vertexAiIndexers: () => vertexAiIndexers
});
module.exports = __toCommonJS(indexers_exports);
var import_embedder = require("@genkit-ai/ai/embedder");
var import_retriever = require("@genkit-ai/ai/retriever");
var import_types = require("./types");
var import_upsert_datapoints = require("./upsert_datapoints");
const vertexAiIndexerRef = (params) => {
  var _a;
  return (0, import_retriever.indexerRef)({
    name: `vertexai/${params.indexId}`,
    info: {
      label: (_a = params.displayName) != null ? _a : `Vertex AI - ${params.indexId}`
    },
    configSchema: import_types.VertexAIVectorIndexerOptionsSchema.optional()
  });
};
function vertexAiIndexers(params) {
  var _a;
  const vectorSearchOptions = params.pluginOptions.vectorSearchOptions;
  const defaultEmbedder = params.defaultEmbedder;
  const indexers = [];
  if (!vectorSearchOptions || vectorSearchOptions.length === 0) {
    return indexers;
  }
  for (const vectorSearchOption of vectorSearchOptions) {
    const { documentIndexer, indexId } = vectorSearchOption;
    const embedder = (_a = vectorSearchOption.embedder) != null ? _a : defaultEmbedder;
    const embedderOptions = vectorSearchOption.embedderOptions;
    const indexer = (0, import_retriever.defineIndexer)(
      {
        name: `vertexai/${indexId}`,
        configSchema: import_types.VertexAIVectorIndexerOptionsSchema.optional()
      },
      (docs, options) => __async(this, null, function* () {
        let docIds = [];
        try {
          docIds = yield documentIndexer(docs, options);
        } catch (error) {
          throw new Error(
            `Error storing your document content/metadata: ${error}`
          );
        }
        const embeddings = yield (0, import_embedder.embedMany)({
          embedder,
          content: docs,
          options: embedderOptions
        });
        const datapoints = embeddings.map(
          ({ embedding }, i) => new import_types.Datapoint({
            datapointId: docIds[i],
            featureVector: embedding
          })
        );
        try {
          yield (0, import_upsert_datapoints.upsertDatapoints)({
            datapoints,
            authClient: params.authClient,
            projectId: params.pluginOptions.projectId,
            location: params.pluginOptions.location,
            indexId
          });
        } catch (error) {
          throw error;
        }
      })
    );
    indexers.push(indexer);
  }
  return indexers;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  vertexAiIndexerRef,
  vertexAiIndexers
});
//# sourceMappingURL=indexers.js.map