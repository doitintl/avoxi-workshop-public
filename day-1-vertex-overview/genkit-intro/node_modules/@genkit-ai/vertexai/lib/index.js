"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var src_exports = {};
__export(src_exports, {
  DocumentIndexer: () => import_vector_search2.DocumentIndexer,
  DocumentRetriever: () => import_vector_search2.DocumentRetriever,
  Neighbor: () => import_vector_search2.Neighbor,
  VectorSearchOptions: () => import_vector_search2.VectorSearchOptions,
  VertexAIEvaluationMetricType: () => import_evaluation.VertexAIEvaluationMetricType,
  claude35Sonnet: () => import_anthropic.claude35Sonnet,
  claude3Haiku: () => import_anthropic.claude3Haiku,
  claude3Opus: () => import_anthropic.claude3Opus,
  claude3Sonnet: () => import_anthropic.claude3Sonnet,
  default: () => src_default,
  gemini15Flash: () => import_gemini.gemini15Flash,
  gemini15FlashPreview: () => import_gemini.gemini15FlashPreview,
  gemini15Pro: () => import_gemini.gemini15Pro,
  gemini15ProPreview: () => import_gemini.gemini15ProPreview,
  geminiPro: () => import_gemini.geminiPro,
  geminiProVision: () => import_gemini.geminiProVision,
  getBigQueryDocumentIndexer: () => import_vector_search2.getBigQueryDocumentIndexer,
  getBigQueryDocumentRetriever: () => import_vector_search2.getBigQueryDocumentRetriever,
  getFirestoreDocumentIndexer: () => import_vector_search2.getFirestoreDocumentIndexer,
  getFirestoreDocumentRetriever: () => import_vector_search2.getFirestoreDocumentRetriever,
  imagen2: () => import_imagen.imagen2,
  llama3: () => import_model_garden.llama3,
  llama31: () => import_model_garden.llama31,
  textEmbedding004: () => import_embedder.textEmbedding004,
  textEmbeddingGecko: () => import_embedder.textEmbeddingGecko,
  textEmbeddingGecko001: () => import_embedder.textEmbeddingGecko001,
  textEmbeddingGecko002: () => import_embedder.textEmbeddingGecko002,
  textEmbeddingGecko003: () => import_embedder.textEmbeddingGecko003,
  textEmbeddingGeckoMultilingual001: () => import_embedder.textEmbeddingGeckoMultilingual001,
  textMultilingualEmbedding002: () => import_embedder.textMultilingualEmbedding002,
  vertexAI: () => vertexAI,
  vertexAiIndexerRef: () => import_vector_search2.vertexAiIndexerRef,
  vertexAiIndexers: () => import_vector_search2.vertexAiIndexers,
  vertexAiRetrieverRef: () => import_vector_search2.vertexAiRetrieverRef,
  vertexAiRetrievers: () => import_vector_search2.vertexAiRetrievers
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@genkit-ai/core");
var import_vertexai = require("@google-cloud/vertexai");
var import_google_auth_library = require("google-auth-library");
var import_anthropic = require("./anthropic.js");
var import_embedder = require("./embedder.js");
var import_evaluation = require("./evaluation.js");
var import_gemini = require("./gemini.js");
var import_imagen = require("./imagen.js");
var import_model_garden = require("./model_garden.js");
var import_vector_search = require("./vector-search");
var import_vector_search2 = require("./vector-search");
const CLOUD_PLATFROM_OAUTH_SCOPE = "https://www.googleapis.com/auth/cloud-platform";
const vertexAI = (0, import_core.genkitPlugin)(
  "vertexai",
  (options) => __async(void 0, null, function* () {
    var _a, _b, _c;
    const authClient = new import_google_auth_library.GoogleAuth(
      (_a = options == null ? void 0 : options.googleAuth) != null ? _a : { scopes: [CLOUD_PLATFROM_OAUTH_SCOPE] }
    );
    const projectId = (options == null ? void 0 : options.projectId) || (yield authClient.getProjectId());
    const location = (options == null ? void 0 : options.location) || "us-central1";
    const confError = (parameter, envVariableName) => {
      return new Error(
        `VertexAI Plugin is missing the '${parameter}' configuration. Please set the '${envVariableName}' environment variable or explicitly pass '${parameter}' into genkit config.`
      );
    };
    if (!location) {
      throw confError("location", "GCLOUD_LOCATION");
    }
    if (!projectId) {
      throw confError("project", "GCLOUD_PROJECT");
    }
    const vertexClientFactoryCache = {};
    const vertexClientFactory = (request) => {
      var _a2;
      const requestLocation = ((_a2 = request.config) == null ? void 0 : _a2.location) || location;
      if (!vertexClientFactoryCache[requestLocation]) {
        vertexClientFactoryCache[requestLocation] = new import_vertexai.VertexAI({
          project: projectId,
          location: requestLocation,
          googleAuthOptions: options == null ? void 0 : options.googleAuth
        });
      }
      return vertexClientFactoryCache[requestLocation];
    };
    const metrics = (options == null ? void 0 : options.evaluation) && options.evaluation.metrics.length > 0 ? options.evaluation.metrics : [];
    const models = [
      (0, import_imagen.imagen2Model)(authClient, { projectId, location }),
      ...Object.keys(import_gemini.SUPPORTED_GEMINI_MODELS).map(
        (name) => (0, import_gemini.geminiModel)(name, vertexClientFactory, { projectId, location })
      )
    ];
    if ((options == null ? void 0 : options.modelGardenModels) || ((_b = options == null ? void 0 : options.modelGarden) == null ? void 0 : _b.models)) {
      const mgModels = (options == null ? void 0 : options.modelGardenModels) || ((_c = options == null ? void 0 : options.modelGarden) == null ? void 0 : _c.models);
      mgModels.forEach((m) => {
        var _a2;
        const anthropicEntry = Object.entries(import_anthropic.SUPPORTED_ANTHROPIC_MODELS).find(
          ([_, value]) => value.name === m.name
        );
        if (anthropicEntry) {
          models.push((0, import_anthropic.anthropicModel)(anthropicEntry[0], projectId, location));
          return;
        }
        const openaiModel = Object.entries(import_model_garden.SUPPORTED_OPENAI_FORMAT_MODELS).find(
          ([_, value]) => value.name === m.name
        );
        if (openaiModel) {
          models.push(
            (0, import_model_garden.modelGardenOpenaiCompatibleModel)(
              openaiModel[0],
              projectId,
              location,
              authClient,
              (_a2 = options.modelGarden) == null ? void 0 : _a2.openAiBaseUrlTemplate
            )
          );
          return;
        }
        throw new Error(`Unsupported model garden model: ${m.name}`);
      });
    }
    const embedders = Object.keys(import_embedder.SUPPORTED_EMBEDDER_MODELS).map(
      (name) => (0, import_embedder.textEmbeddingGeckoEmbedder)(name, authClient, { projectId, location })
    );
    let indexers = [];
    let retrievers = [];
    if ((options == null ? void 0 : options.vectorSearchOptions) && options.vectorSearchOptions.length > 0) {
      const defaultEmbedder = embedders[0];
      indexers = (0, import_vector_search.vertexAiIndexers)({
        pluginOptions: options,
        authClient,
        defaultEmbedder
      });
      retrievers = (0, import_vector_search.vertexAiRetrievers)({
        pluginOptions: options,
        authClient,
        defaultEmbedder
      });
    }
    return {
      models,
      embedders,
      evaluators: (0, import_evaluation.vertexEvaluators)(authClient, metrics, projectId, location),
      retrievers,
      indexers
    };
  })
);
var src_default = vertexAI;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DocumentIndexer,
  DocumentRetriever,
  Neighbor,
  VectorSearchOptions,
  VertexAIEvaluationMetricType,
  claude35Sonnet,
  claude3Haiku,
  claude3Opus,
  claude3Sonnet,
  gemini15Flash,
  gemini15FlashPreview,
  gemini15Pro,
  gemini15ProPreview,
  geminiPro,
  geminiProVision,
  getBigQueryDocumentIndexer,
  getBigQueryDocumentRetriever,
  getFirestoreDocumentIndexer,
  getFirestoreDocumentRetriever,
  imagen2,
  llama3,
  llama31,
  textEmbedding004,
  textEmbeddingGecko,
  textEmbeddingGecko001,
  textEmbeddingGecko002,
  textEmbeddingGecko003,
  textEmbeddingGeckoMultilingual001,
  textMultilingualEmbedding002,
  vertexAI,
  vertexAiIndexerRef,
  vertexAiIndexers,
  vertexAiRetrieverRef,
  vertexAiRetrievers
});
//# sourceMappingURL=index.js.map