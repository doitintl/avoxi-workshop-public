{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateRequest, ModelReference } from '@genkit-ai/ai/model';\nimport { IndexerAction, RetrieverAction } from '@genkit-ai/ai/retriever';\nimport { Plugin, genkitPlugin } from '@genkit-ai/core';\nimport { VertexAI } from '@google-cloud/vertexai';\nimport { GoogleAuth, GoogleAuthOptions } from 'google-auth-library';\nimport z from 'zod';\nimport {\n  SUPPORTED_ANTHROPIC_MODELS,\n  anthropicModel,\n  claude35Sonnet,\n  claude3Haiku,\n  claude3Opus,\n  claude3Sonnet,\n} from './anthropic.js';\nimport {\n  SUPPORTED_EMBEDDER_MODELS,\n  textEmbedding004,\n  textEmbeddingGecko,\n  textEmbeddingGecko001,\n  textEmbeddingGecko002,\n  textEmbeddingGecko003,\n  textEmbeddingGeckoEmbedder,\n  textEmbeddingGeckoMultilingual001,\n  textMultilingualEmbedding002,\n} from './embedder.js';\nimport {\n  VertexAIEvaluationMetric,\n  VertexAIEvaluationMetricType,\n  vertexEvaluators,\n} from './evaluation.js';\nimport {\n  GeminiConfigSchema,\n  SUPPORTED_GEMINI_MODELS,\n  gemini15Flash,\n  gemini15FlashPreview,\n  gemini15Pro,\n  gemini15ProPreview,\n  geminiModel,\n  geminiPro,\n  geminiProVision,\n} from './gemini.js';\nimport { imagen2, imagen2Model } from './imagen.js';\nimport {\n  SUPPORTED_OPENAI_FORMAT_MODELS,\n  llama3,\n  llama31,\n  modelGardenOpenaiCompatibleModel,\n} from './model_garden.js';\nimport {\n  VectorSearchOptions,\n  vertexAiIndexers,\n  vertexAiRetrievers,\n} from './vector-search';\nexport {\n  DocumentIndexer,\n  DocumentRetriever,\n  Neighbor,\n  VectorSearchOptions,\n  getBigQueryDocumentIndexer,\n  getBigQueryDocumentRetriever,\n  getFirestoreDocumentIndexer,\n  getFirestoreDocumentRetriever,\n  vertexAiIndexerRef,\n  vertexAiIndexers,\n  vertexAiRetrieverRef,\n  vertexAiRetrievers,\n} from './vector-search';\nexport {\n  VertexAIEvaluationMetricType as VertexAIEvaluationMetricType,\n  claude35Sonnet,\n  claude3Haiku,\n  claude3Opus,\n  claude3Sonnet,\n  gemini15Flash,\n  gemini15FlashPreview,\n  gemini15Pro,\n  gemini15ProPreview,\n  geminiPro,\n  geminiProVision,\n  imagen2,\n  llama3,\n  llama31,\n  textEmbedding004,\n  textEmbeddingGecko,\n  textEmbeddingGecko001,\n  textEmbeddingGecko002,\n  textEmbeddingGecko003,\n  textEmbeddingGeckoMultilingual001,\n  textMultilingualEmbedding002,\n};\n\nexport interface PluginOptions {\n  /** The Google Cloud project id to call. */\n  projectId?: string;\n  /** The Google Cloud region to call. */\n  location: string;\n  /** Provide custom authentication configuration for connecting to Vertex AI. */\n  googleAuth?: GoogleAuthOptions;\n  /** Configure Vertex AI evaluators */\n  evaluation?: {\n    metrics: VertexAIEvaluationMetric[];\n  };\n  /**\n   * @deprecated use `modelGarden.models`\n   */\n  modelGardenModels?: ModelReference<any>[];\n  modelGarden?: {\n    models: ModelReference<any>[];\n    openAiBaseUrlTemplate?: string;\n  };\n  /** Configure Vertex AI vector search index options */\n  vectorSearchOptions?: VectorSearchOptions<z.ZodTypeAny, any, any>[];\n}\n\nconst CLOUD_PLATFROM_OAUTH_SCOPE =\n  'https://www.googleapis.com/auth/cloud-platform';\n\n/**\n * Add Google Cloud Vertex AI to Genkit. Includes Gemini and Imagen models and text embedder.\n */\nexport const vertexAI: Plugin<[PluginOptions] | []> = genkitPlugin(\n  'vertexai',\n  async (options?: PluginOptions) => {\n    const authClient = new GoogleAuth(\n      options?.googleAuth ?? { scopes: [CLOUD_PLATFROM_OAUTH_SCOPE] }\n    );\n    const projectId = options?.projectId || (await authClient.getProjectId());\n\n    const location = options?.location || 'us-central1';\n    const confError = (parameter: string, envVariableName: string) => {\n      return new Error(\n        `VertexAI Plugin is missing the '${parameter}' configuration. Please set the '${envVariableName}' environment variable or explicitly pass '${parameter}' into genkit config.`\n      );\n    };\n    if (!location) {\n      throw confError('location', 'GCLOUD_LOCATION');\n    }\n    if (!projectId) {\n      throw confError('project', 'GCLOUD_PROJECT');\n    }\n\n    const vertexClientFactoryCache: Record<string, VertexAI> = {};\n    const vertexClientFactory = (\n      request: GenerateRequest<typeof GeminiConfigSchema>\n    ): VertexAI => {\n      const requestLocation = request.config?.location || location;\n      if (!vertexClientFactoryCache[requestLocation]) {\n        vertexClientFactoryCache[requestLocation] = new VertexAI({\n          project: projectId,\n          location: requestLocation,\n          googleAuthOptions: options?.googleAuth,\n        });\n      }\n      return vertexClientFactoryCache[requestLocation];\n    };\n    const metrics =\n      options?.evaluation && options.evaluation.metrics.length > 0\n        ? options.evaluation.metrics\n        : [];\n\n    const models = [\n      imagen2Model(authClient, { projectId, location }),\n      ...Object.keys(SUPPORTED_GEMINI_MODELS).map((name) =>\n        geminiModel(name, vertexClientFactory, { projectId, location })\n      ),\n    ];\n\n    if (options?.modelGardenModels || options?.modelGarden?.models) {\n      const mgModels =\n        options?.modelGardenModels || options?.modelGarden?.models;\n      mgModels!.forEach((m) => {\n        const anthropicEntry = Object.entries(SUPPORTED_ANTHROPIC_MODELS).find(\n          ([_, value]) => value.name === m.name\n        );\n        if (anthropicEntry) {\n          models.push(anthropicModel(anthropicEntry[0], projectId, location));\n          return;\n        }\n        const openaiModel = Object.entries(SUPPORTED_OPENAI_FORMAT_MODELS).find(\n          ([_, value]) => value.name === m.name\n        );\n        if (openaiModel) {\n          models.push(\n            modelGardenOpenaiCompatibleModel(\n              openaiModel[0],\n              projectId,\n              location,\n              authClient,\n              options.modelGarden?.openAiBaseUrlTemplate\n            )\n          );\n          return;\n        }\n        throw new Error(`Unsupported model garden model: ${m.name}`);\n      });\n    }\n\n    const embedders = Object.keys(SUPPORTED_EMBEDDER_MODELS).map((name) =>\n      textEmbeddingGeckoEmbedder(name, authClient, { projectId, location })\n    );\n\n    let indexers: IndexerAction<z.ZodTypeAny>[] = [];\n    let retrievers: RetrieverAction<z.ZodTypeAny>[] = [];\n\n    if (\n      options?.vectorSearchOptions &&\n      options.vectorSearchOptions.length > 0\n    ) {\n      const defaultEmbedder = embedders[0];\n\n      indexers = vertexAiIndexers({\n        pluginOptions: options,\n        authClient,\n        defaultEmbedder,\n      });\n\n      retrievers = vertexAiRetrievers({\n        pluginOptions: options,\n        authClient,\n        defaultEmbedder,\n      });\n    }\n\n    return {\n      models,\n      embedders,\n      evaluators: vertexEvaluators(authClient, metrics, projectId, location),\n      retrievers,\n      indexers,\n    };\n  }\n);\n\nexport default vertexAI;\n"],"mappings":"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","names":["VectorSearchOptions","vertexAiIndexers","vertexAiRetrievers","_a"]}