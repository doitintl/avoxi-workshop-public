{"version":3,"sources":["../src/model_garden.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateRequest, ModelAction, modelRef } from '@genkit-ai/ai/model';\nimport { GENKIT_CLIENT_HEADER } from '@genkit-ai/core';\nimport { GoogleAuth } from 'google-auth-library';\nimport OpenAI from 'openai';\n\nimport z from 'zod';\nimport {\n  openaiCompatibleModel,\n  OpenAIConfigSchema,\n} from './openai_compatibility.js';\n\nexport const ModelGardenModelConfigSchema = OpenAIConfigSchema.extend({\n  location: z.string().optional(),\n});\n\nexport const llama31 = modelRef({\n  name: 'vertexai/llama-3.1',\n  info: {\n    label: 'Llama 3.1',\n    supports: {\n      multiturn: true,\n      tools: true,\n      media: false,\n      systemRole: true,\n      output: ['text', 'json'],\n    },\n    versions: [\n      'meta/llama3-405b-instruct-maas',\n      // 8b and 70b versions are coming soon\n    ],\n  },\n  configSchema: ModelGardenModelConfigSchema,\n  version: 'meta/llama3-405b-instruct-maas',\n});\n\n/**\n * @deprecated use `llama31` instead\n */\nexport const llama3 = modelRef({\n  name: 'vertexai/llama3-405b',\n  info: {\n    label: 'Llama 3.1 405b',\n    supports: {\n      multiturn: true,\n      tools: true,\n      media: false,\n      systemRole: true,\n      output: ['text'],\n    },\n    versions: ['meta/llama3-405b-instruct-maas'],\n  },\n  configSchema: ModelGardenModelConfigSchema,\n  version: 'meta/llama3-405b-instruct-maas',\n});\n\nexport const SUPPORTED_OPENAI_FORMAT_MODELS = {\n  'llama3-405b': llama3,\n  'llama-3.1': llama31,\n};\n\nexport function modelGardenOpenaiCompatibleModel(\n  name: string,\n  projectId: string,\n  location: string,\n  googleAuth: GoogleAuth,\n  baseUrlTemplate: string | undefined\n): ModelAction<typeof ModelGardenModelConfigSchema> {\n  const model = SUPPORTED_OPENAI_FORMAT_MODELS[name];\n  if (!model) throw new Error(`Unsupported model: ${name}`);\n  if (!baseUrlTemplate) {\n    baseUrlTemplate =\n      'https://{location}-aiplatform.googleapis.com/v1beta1/projects/{projectId}/locations/{location}/endpoints/openapi';\n  }\n\n  const clientFactory = async (\n    request: GenerateRequest<typeof ModelGardenModelConfigSchema>\n  ): Promise<OpenAI> => {\n    const requestLocation = request.config?.location || location;\n    return new OpenAI({\n      baseURL: baseUrlTemplate!\n        .replace(/{location}/g, requestLocation)\n        .replace(/{projectId}/g, projectId),\n      apiKey: (await googleAuth.getAccessToken())!,\n      defaultHeaders: {\n        'X-Goog-Api-Client': GENKIT_CLIENT_HEADER,\n      },\n    });\n  };\n  return openaiCompatibleModel(model, clientFactory);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAAuD;AACvD,kBAAqC;AAErC,oBAAmB;AAEnB,iBAAc;AACd,kCAGO;AAEA,MAAM,+BAA+B,+CAAmB,OAAO;AAAA,EACpE,UAAU,WAAAA,QAAE,OAAO,EAAE,SAAS;AAChC,CAAC;AAEM,MAAM,cAAU,uBAAS;AAAA,EAC9B,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU;AAAA,MACR,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,QAAQ,CAAC,QAAQ,MAAM;AAAA,IACzB;AAAA,IACA,UAAU;AAAA,MACR;AAAA;AAAA,IAEF;AAAA,EACF;AAAA,EACA,cAAc;AAAA,EACd,SAAS;AACX,CAAC;AAKM,MAAM,aAAS,uBAAS;AAAA,EAC7B,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU;AAAA,MACR,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,QAAQ,CAAC,MAAM;AAAA,IACjB;AAAA,IACA,UAAU,CAAC,gCAAgC;AAAA,EAC7C;AAAA,EACA,cAAc;AAAA,EACd,SAAS;AACX,CAAC;AAEM,MAAM,iCAAiC;AAAA,EAC5C,eAAe;AAAA,EACf,aAAa;AACf;AAEO,SAAS,iCACd,MACA,WACA,UACA,YACA,iBACkD;AAClD,QAAM,QAAQ,+BAA+B,IAAI;AACjD,MAAI,CAAC;AAAO,UAAM,IAAI,MAAM,sBAAsB,IAAI,EAAE;AACxD,MAAI,CAAC,iBAAiB;AACpB,sBACE;AAAA,EACJ;AAEA,QAAM,gBAAgB,CACpB,YACoB;AA5FxB;AA6FI,UAAM,oBAAkB,aAAQ,WAAR,mBAAgB,aAAY;AACpD,WAAO,IAAI,cAAAC,QAAO;AAAA,MAChB,SAAS,gBACN,QAAQ,eAAe,eAAe,EACtC,QAAQ,gBAAgB,SAAS;AAAA,MACpC,QAAS,MAAM,WAAW,eAAe;AAAA,MACzC,gBAAgB;AAAA,QACd,qBAAqB;AAAA,MACvB;AAAA,IACF,CAAC;AAAA,EACH;AACA,aAAO,mDAAsB,OAAO,aAAa;AACnD;","names":["z","OpenAI"]}