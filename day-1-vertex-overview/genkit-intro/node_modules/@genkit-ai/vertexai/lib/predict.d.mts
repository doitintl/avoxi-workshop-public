import { GoogleAuth } from 'google-auth-library';
import { P as PluginOptions } from './embedder-D6WUzFH_.mjs';
import '@genkit-ai/ai/embedder';
import 'zod';
import '@genkit-ai/ai/model';
import '@genkit-ai/core';
import './anthropic.mjs';
import '@anthropic-ai/sdk/resources/messages';
import './evaluation.mjs';
import '@google-cloud/vertexai';
import './model_garden.mjs';
import '@google-cloud/bigquery';
import '@genkit-ai/ai/retriever';
import '@google-cloud/aiplatform';
import 'firebase-admin/firestore';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface PredictionResponse<R> {
    predictions: R[];
}
type PredictClient<I = unknown, R = unknown, P = unknown> = (instances: I[], parameters?: P) => Promise<PredictionResponse<R>>;
declare function predictModel<I = unknown, R = unknown, P = unknown>(auth: GoogleAuth, { location, projectId }: PluginOptions, model: string): PredictClient<I, R, P>;

export { type PredictClient, predictModel };
