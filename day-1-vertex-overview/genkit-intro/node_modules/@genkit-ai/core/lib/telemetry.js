"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var telemetry_exports = {};
__export(telemetry_exports, {
  writeActionFailure: () => writeActionFailure,
  writeActionSuccess: () => writeActionSuccess
});
module.exports = __toCommonJS(telemetry_exports);
var import_api = require("@opentelemetry/api");
var import_index = require("./index.js");
var import_metrics = require("./metrics.js");
var import_instrumentation = require("./tracing/instrumentation.js");
const _N = import_metrics.internalMetricNamespaceWrap.bind(null, "action");
const actionCounter = new import_metrics.MetricCounter(_N("requests"), {
  description: "Counts calls to genkit actions.",
  valueType: import_api.ValueType.INT
});
const actionLatencies = new import_metrics.MetricHistogram(_N("latency"), {
  description: "Latencies when calling Genkit actions.",
  valueType: import_api.ValueType.DOUBLE,
  unit: "ms"
});
function writeActionSuccess(actionName, latencyMs) {
  var _a, _b, _c, _d;
  const dimensions = {
    name: actionName,
    flowName: (_b = (_a = import_instrumentation.traceMetadataAls) == null ? void 0 : _a.getStore()) == null ? void 0 : _b.flowName,
    path: (_d = (_c = import_instrumentation.spanMetadataAls) == null ? void 0 : _c.getStore()) == null ? void 0 : _d.path,
    status: "success",
    source: "ts",
    sourceVersion: import_index.GENKIT_VERSION
  };
  actionCounter.add(1, dimensions);
  actionLatencies.record(latencyMs, dimensions);
}
function writeActionFailure(actionName, latencyMs, err) {
  var _a, _b, _c, _d;
  const dimensions = {
    name: actionName,
    flowName: (_b = (_a = import_instrumentation.traceMetadataAls) == null ? void 0 : _a.getStore()) == null ? void 0 : _b.flowName,
    path: (_d = (_c = import_instrumentation.spanMetadataAls) == null ? void 0 : _c.getStore()) == null ? void 0 : _d.path,
    source: "ts",
    sourceVersion: import_index.GENKIT_VERSION,
    status: "failure",
    error: err == null ? void 0 : err.name
  };
  actionCounter.add(1, dimensions);
  actionLatencies.record(latencyMs, dimensions);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  writeActionFailure,
  writeActionSuccess
});
//# sourceMappingURL=telemetry.js.map