{"version":3,"sources":["../src/telemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ValueType } from '@opentelemetry/api';\nimport { GENKIT_VERSION } from './index.js';\nimport {\n  internalMetricNamespaceWrap,\n  MetricCounter,\n  MetricHistogram,\n} from './metrics.js';\nimport {\n  spanMetadataAls,\n  traceMetadataAls,\n} from './tracing/instrumentation.js';\n\n/**\n * Wraps the declared metrics in a Genkit-specific, internal namespace.\n */\nconst _N = internalMetricNamespaceWrap.bind(null, 'action');\n\nconst actionCounter = new MetricCounter(_N('requests'), {\n  description: 'Counts calls to genkit actions.',\n  valueType: ValueType.INT,\n});\n\nconst actionLatencies = new MetricHistogram(_N('latency'), {\n  description: 'Latencies when calling Genkit actions.',\n  valueType: ValueType.DOUBLE,\n  unit: 'ms',\n});\n\nexport function writeActionSuccess(actionName: string, latencyMs: number) {\n  const dimensions = {\n    name: actionName,\n    flowName: traceMetadataAls?.getStore()?.flowName,\n    path: spanMetadataAls?.getStore()?.path,\n    status: 'success',\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  };\n  actionCounter.add(1, dimensions);\n  actionLatencies.record(latencyMs, dimensions);\n}\n\nexport function writeActionFailure(\n  actionName: string,\n  latencyMs: number,\n  err: any\n) {\n  const dimensions = {\n    name: actionName,\n    flowName: traceMetadataAls?.getStore()?.flowName,\n    path: spanMetadataAls?.getStore()?.path,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n    status: 'failure',\n    error: err?.name,\n  };\n  actionCounter.add(1, dimensions);\n  actionLatencies.record(latencyMs, dimensions);\n}\n"],"mappings":";AAgBA,SAAS,iBAAiB;AAC1B,SAAS,sBAAsB;AAC/B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAKP,MAAM,KAAK,4BAA4B,KAAK,MAAM,QAAQ;AAE1D,MAAM,gBAAgB,IAAI,cAAc,GAAG,UAAU,GAAG;AAAA,EACtD,aAAa;AAAA,EACb,WAAW,UAAU;AACvB,CAAC;AAED,MAAM,kBAAkB,IAAI,gBAAgB,GAAG,SAAS,GAAG;AAAA,EACzD,aAAa;AAAA,EACb,WAAW,UAAU;AAAA,EACrB,MAAM;AACR,CAAC;AAEM,SAAS,mBAAmB,YAAoB,WAAmB;AA5C1E;AA6CE,QAAM,aAAa;AAAA,IACjB,MAAM;AAAA,IACN,WAAU,mDAAkB,eAAlB,mBAA8B;AAAA,IACxC,OAAM,kDAAiB,eAAjB,mBAA6B;AAAA,IACnC,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,eAAe;AAAA,EACjB;AACA,gBAAc,IAAI,GAAG,UAAU;AAC/B,kBAAgB,OAAO,WAAW,UAAU;AAC9C;AAEO,SAAS,mBACd,YACA,WACA,KACA;AA7DF;AA8DE,QAAM,aAAa;AAAA,IACjB,MAAM;AAAA,IACN,WAAU,mDAAkB,eAAlB,mBAA8B;AAAA,IACxC,OAAM,kDAAiB,eAAjB,mBAA6B;AAAA,IACnC,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,QAAQ;AAAA,IACR,OAAO,2BAAK;AAAA,EACd;AACA,gBAAc,IAAI,GAAG,UAAU;AAC/B,kBAAgB,OAAO,WAAW,UAAU;AAC9C;","names":[]}