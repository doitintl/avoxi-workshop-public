{"version":3,"sources":["../src/telemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GENKIT_VERSION } from '@genkit-ai/core';\nimport { logger } from '@genkit-ai/core/logging';\nimport {\n  internalMetricNamespaceWrap,\n  MetricCounter,\n  MetricHistogram,\n} from '@genkit-ai/core/metrics';\nimport {\n  PathMetadata,\n  spanMetadataAls,\n  toDisplayPath,\n  traceMetadataAls,\n} from '@genkit-ai/core/tracing';\nimport { ValueType } from '@opentelemetry/api';\nimport express from 'express';\n\n/**\n * Wraps the declared metrics in a Genkit-specific, internal namespace.\n */\nconst _N = internalMetricNamespaceWrap.bind(null, 'flow');\n\nconst flowCounter = new MetricCounter(_N('requests'), {\n  description: 'Counts calls to genkit flows.',\n  valueType: ValueType.INT,\n});\n\nconst pathCounter = new MetricCounter(_N('path/requests'), {\n  description: 'Tracks unique flow paths per flow.',\n  valueType: ValueType.INT,\n});\n\nconst pathLatencies = new MetricHistogram(_N('path/latency'), {\n  description: 'Latencies per flow path.',\n  ValueType: ValueType.DOUBLE,\n  unit: 'ms',\n});\n\nconst flowLatencies = new MetricHistogram(_N('latency'), {\n  description: 'Latencies when calling Genkit flows.',\n  valueType: ValueType.DOUBLE,\n  unit: 'ms',\n});\n\nexport function recordError(err: any) {\n  const paths = traceMetadataAls?.getStore()?.paths || new Set<PathMetadata>();\n  const failedPath =\n    Array.from(paths).find((p) => p.status === 'failure')?.path ||\n    spanMetadataAls?.getStore()?.path ||\n    '';\n  const displayPath = toDisplayPath(failedPath);\n  logger.logStructuredError(`Error[${displayPath}, ${err.name}]`, {\n    path: displayPath,\n    qualifiedPath: failedPath,\n    name: err.name,\n    message: err.message,\n    stack: err.stack,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n}\n\nexport function writeFlowSuccess(flowName: string, latencyMs: number) {\n  const dimensions = {\n    name: flowName,\n    status: 'success',\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  };\n  flowCounter.add(1, dimensions);\n  flowLatencies.record(latencyMs, dimensions);\n\n  writePathMetrics(flowName, latencyMs);\n}\n\nexport function writeFlowFailure(\n  flowName: string,\n  latencyMs: number,\n  err: any\n) {\n  const dimensions = {\n    name: flowName,\n    status: 'failure',\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n    error: err.name,\n  };\n  flowCounter.add(1, dimensions);\n  flowLatencies.record(latencyMs, dimensions);\n\n  writePathMetrics(flowName, latencyMs, err);\n}\n\nexport function logRequest(flowName: string, req: express.Request) {\n  const qualifiedPath = spanMetadataAls?.getStore()?.path || '';\n  const path = toDisplayPath(qualifiedPath);\n  logger.logStructured(`Request[${flowName}]`, {\n    flowName: flowName,\n    headers: {\n      ...req.headers,\n      authorization: '<redacted>',\n    },\n    params: req.params,\n    body: req.body,\n    query: req.query,\n    originalUrl: req.originalUrl,\n    path,\n    qualifiedPath,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n}\n\nexport function logResponse(flowName: string, respCode: number, respBody: any) {\n  const qualifiedPath = spanMetadataAls?.getStore()?.path || '';\n  const path = toDisplayPath(qualifiedPath);\n  logger.logStructured(`Response[${flowName}]`, {\n    flowName: flowName,\n    path,\n    qualifiedPath,\n    code: respCode,\n    body: respBody,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n}\n\n/** Writes all path-level metrics stored in the current flow execution. */\nfunction writePathMetrics(flowName: string, latencyMs: number, err?: any) {\n  const paths = traceMetadataAls.getStore()?.paths || new Set<PathMetadata>();\n  const flowPaths = Array.from(paths).filter((meta) =>\n    meta.path.includes(flowName)\n  );\n  if (flowPaths) {\n    logger.logStructured(`Paths[${flowName}]`, {\n      flowName: flowName,\n      paths: flowPaths.map((p) => toDisplayPath(p.path)),\n    });\n\n    flowPaths.forEach((p) => writePathMetric(flowName, p));\n    // If we're writing a failure, but none of the stored paths have failed,\n    // this means the root flow threw the error.\n    if (err && !flowPaths.some((p) => p.status === 'failure')) {\n      writePathMetric(flowName, {\n        status: 'failure',\n        path: spanMetadataAls?.getStore()?.path || '',\n        error: err,\n        latency: latencyMs,\n      });\n    }\n  }\n}\n\n/** Writes metrics for a single PathMetadata */\nfunction writePathMetric(flowName: string, meta: PathMetadata) {\n  const pathDimensions = {\n    flowName: flowName,\n    status: meta.status,\n    error: meta.error,\n    path: meta.path,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  };\n  pathCounter.add(1, pathDimensions);\n  pathLatencies.record(meta.latency, pathDimensions);\n}\n"],"mappings":"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","names":[]}